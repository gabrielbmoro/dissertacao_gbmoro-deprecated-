# -*- coding: utf-8 -*-
# -*- mode: org -*-
#+startup: beamer
#+STARTUP: overview
#+STARTUP: indent
#+TAGS: noexport(n)

# Impact on Intranode and Internode Communication
#+Title: Detecting Memory-Bound Regions in Parallel Applications
#+Author: Gabriel B. Moro @@latex:\\@@ gabriel.bmoro@inf.ufrgs.br
#+Date: Porto Alegre, December 2016

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [12pt,xcolor=dvipsnames,presentation]
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+STARTUP: beamer overview indent
#+LATEX_HEADER: \usepackage{tikz}
#+LATEX_HEADER: \usepackage{perpage}
#+LATEX_HEADER: \usetikzlibrary{arrows,shapes}
#+LATEX_HEADER: \input{org-babel-style-preembule.tex}
#+LATEX_HEADER: \institute[]{
#+LATEX_HEADER:   \includegraphics[width=.16\textwidth]{img/gppd.png}
#+LATEX_HEADER:   \hfill
#+LATEX_HEADER:   \includegraphics[width=.16\textwidth]{img/inf.pdf}
#+LATEX_HEADER:   \hfill
#+LATEX_HEADER:   \includegraphics[width=.16\textwidth]{img/ufrgs.pdf}
#+LATEX_HEADER:   \hfill
#+LATEX_HEADER:   \includegraphics[width=.26\textwidth]{img/hpe.jpg}
#+LATEX_HEADER: }
#+LaTeX: \input{org-babel-document-preembule.tex}
#+LaTeX: \newcommand{\prettysmall}[1]{\fontsize{#1}{#1}\selectfont}

#+LaTeX: \tikzstyle{format} = [draw, thin, fill=blue!20]
#+LaTeX: \tikzstyle{medium} = [ellipse, draw, thin, fill=green!20, minimum height=2.5em]


* Introduction

** 
*** Introduction

*Motivation*

- Memory-bound: programs with misses cache rate considerable
  (e.g. Breadth-First Search) 

- CPU-bound: programs limited by processing (e.g. Matrices
  Multiplication) 

- Programs can have fragments more Memory-bound than others more
  CPU-bound (e.g. Fourier Transform) 

*Objective*

- Measure hardware counters at every given time interval to
discover memory-bound regions

* Methodology
** 
*** Methodology

\begin{tikzpicture}

\node at (0,17) [draw,rectangle,rectangle left angle=70,rectangle right angle=-70,minimum height=1cm, fill=orange!20] (App) {App};
\node at (2.4,18) [draw,rectangle split, rectangle split horizontal,rectangle split parts=3,minimum height=1cm,fill=gray!10] (Lik) {\nodepart{two}\shortstack{Likwid\\}};
\node at (2.4,16) [draw,rectangle split, rectangle split horizontal,rectangle split parts=3,minimum height=1cm,fill=gray!10] (Sc) {\nodepart{two}\shortstack{Score-p\\}};
\node at (5.4,18) [draw,trapezium,trapezium left angle=70,trapezium right angle=-70,minimum height=1cm] (T1) {Trace};
\node at (5.4,16) [draw,trapezium,trapezium left angle=70,trapezium right angle=-70,minimum height=1cm] (T2) {Trace};
\node at (9.4,17) [draw,rectangle,rectangle left angle=70,rectangle right angle=-70,minimum height=1cm,rounded corners,fill=green!20] (Det){\shortstack{Detect Memory-Bound\\ Regions}};

\draw[->] (App.east) + (-1,1.1) coordinate (a1) ++ (0.02,0.12) -- (Lik.west |- a1);
\draw[->] (App.east) + (-1,-0.9) coordinate (a1) ++ (0.02,0.12) -- (Sc.west |- a1);
\draw[->] (Lik.west) + (2.35,0.02) coordinate (a1) -- (T1.west |- a1);
\draw[->] (Sc.west) + (2.52,0.02) coordinate (a1) -- (T2.west |- a1);
\draw[->] (T1.east) + (-1,-0.3) coordinate (a1) ++ (0.02,0.12) -- (Det.west |- a1);
\draw[->] (T2.east) + (-1,0.4) coordinate (a1) ++ (0.02,0.12) -- (Det.west |- a1);


\end{tikzpicture}

*** Results - Likwid

#+LaTeX: \begin{columns}\begin{column}{.45\linewidth}
\begin{figure}[!htb]
\includegraphics[width=\linewidth,height=2.8cm]{../../producao/2016_wsppd/img/ft_L2_L3_100ms.pdf}
\label{figFT}
\end{figure}
\vspace{-1.2cm}
\begin{figure}[!htb]
\includegraphics[width=\linewidth,height=2.8cm]{../../producao/2016_wsppd/img/lu_L2_L3_100ms.pdf}
\label{figLu}
\end{figure}

#+LaTeX: \end{column}
#+LaTeX: \begin{column}{.35\linewidth}
#+LaTeX: {\small
	=Beagle1:=
		- 2 x Intel (R) Xeon (R) E5-2650 CPU 2.00 GHz
		  - 8 physical cores
		  - Hyper-Threading tecnology

  =Experiment=:
  	- Sampling interval - 100 milliseconds.
#+LaTeX:}
#+LaTeX: \end{column}
#+LaTeX: \end{columns}

\vspace{0.5cm}
\hline
\tiny $^{[1]}$ *Moro, Gabriel and Schnorr, Lucas*. /Measuring Hardware Counters for
HPC Application Phase Detection/. XIV Workshop de Processamento
Paralelo e Distribuído. Porto Alegre, 2016.

*** Results - Score-P

#+LaTeX: \begin{columns}\begin{column}{.45\linewidth}

*Metrics*

- Cache L2 loads
- Cache L2 misses


*Filter Script*

- Use of the Score-p filter, selecting only OpenMP regions

- Auxiliary script to remove the excess, selecting only hardware
  counters of the parallel regions 

#+LaTeX: \end{column}
#+LaTeX: \begin{column}{.50\linewidth}
#+LaTeX: {\small


*Trace Generated*

|-----+------------------+---------------|
| _App_ | _Traces Size_      | _Traces Size_   |
|     | (without filter) | (with filter) |
|-----+------------------+---------------|
| CG  | 556M             | 202M          |
| FT  | 11M              | 3.7M          |
| LU  | 20G              | 6.5G          |
|-----+------------------+---------------|

	=Hype2:=
		- 2 x Intel (R) Xeon (R) E5-2650 v3 CPU 2.30 GHz
		  - 2 * 8 cores + HT technology
#+LaTeX:}
#+LaTeX: \end{column}
#+LaTeX: \end{columns}

* Preliminary Results
** 
*** Trace's Format

- *FT* (example)

|---------------------+-----------+-----------+-------|
| =Type of Region=      | =Code Line= | =Metric=    | =Value= |
|---------------------+-----------+-----------+-------|
| omp-parallel        |       736 | PAPIL2TCA | 48282 |
| omp-parallel        |       736 | PAPIL2DCM |  5288 |
| omp-parallel        |       736 | PAPIL2ICM |  8933 |
| omp-do              |       736 | PAPIL2TCA | 48841 |
| omp-do              |       736 | PAPIL2DCM |  5393 |
| omp-do              |       736 | PAPIL2ICM |  9092 |
| omp-implicitbarrier |       739 | PAPIL2TCA |  1321 |
| omp-implicitbarrier |       739 | PAPIL2DCM |   156 |
| omp-implicitbarrier |       739 | PAPIL2ICM |   523 |
| omp-parallel        |       736 | PAPIL2TCA |  2048 |
| omp-parallel        |       736 | PAPIL2DCM |   196 |
| omp-do              |       736 | PAPIL2TCA |  2280 |
| ...                 |           |           |       |

** 
*** Preliminary Results

- *FT*
#+LaTeX: {\centering\includegraphics[width=12cm,height=7cm]{img/ftGraph.png}}

* Conclusion
** 
*** Conclusion

*Contribution*

- Automatically identify the memory-bound regions based on the
hardware counters


*Future Work*

- Reducing the power consumption of parallel applications with DVFS
  approach
  
  	-> Automatic instrumentation of memory-bound regions


* Graphs                                                           :noexport:

#+begin_src R :results output :session *ft* :exports both
library(dplyr);

df <- read.csv("traceF.csv");
k <- df %>% select(region, file,codeline,metric,value) %>% group_by(file,region,codeline) %>% as.data.frame();

k_l2dcm <- k[k$metric %in% "PAPI_L2_DCM",] 
k_l2icm <- k[k$metric %in% "PAPI_L2_ICM",] 
k_l2tca <- k[k$metric %in% "PAPI_L2_TCA",] 

k2 <- data.frame(k_l2dcm$file,k_l2dcm$region,k_l2dcm$codeline,k_l2dcm$value,k_l2icm$value,k_l2tca$value);
k2$missesrate = k2$k_l2dcm.value / k2$k_l2tca.value

k2 <- k2[k2$missesrate > 0.4076,]
#+end_src

#+RESULTS:
#+begin_example

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union
#+end_example


#+begin_src R :results output graphics :file /home/gabrielbmoro/Dropbox/MasterStudy/works/dissertacao_gbmoro/presentations/visitToHPE/img/ftGraph.png :exports both :width 600 :height 400 :session *ft* 
library(ggplot2);

ggplot(k2, aes(x=as.factor(k_l2dcm.codeline), y=missesrate, fill=as.factor(k_l2dcm.region))) +
  geom_bar(stat="identity") +  labs(y = "Cache Misses Rate - Cache L2" , x = "Code Lines") + 
  theme_bw() +
theme(
    strip.text.x=element_text(size = 20),
    axis.title=element_text(size=18),
    axis.text = element_text(size = 10),
    legend.key = element_rect(),
    legend.background = element_rect(fill = "white"),
    legend.title = element_text(size=18),
    legend.text = element_text(size=14),
    panel.grid.major = element_line(colour = "grey"),
    panel.grid.minor = element_blank()
  ) + facet_grid(~k_l2dcm.file);
#+end_src

#+RESULTS:
[[file:/home/gabrielbmoro/Dropbox/MasterStudy/works/dissertacao_gbmoro/presentations/visitToHPE/img/ftGraph.png]]

#+begin_src R :results output :session *cg* :exports both
library(dplyr);

df <- read.csv("traceF.csv");
k <- df %>% select(region, file,codeline,metric,value) %>% group_by(file,region,codeline) %>% as.data.frame();

k_l2dcm <- k[k$metric %in% "PAPI_L2_DCM",] 
k_l2icm <- k[k$metric %in% "PAPI_L2_ICM",] 
k_l2tca <- k[k$metric %in% "PAPI_L2_TCA",] 

k2 <- data.frame(k_l2dcm$file,k_l2dcm$region,k_l2dcm$codeline,k_l2dcm$value,k_l2icm$value,k_l2tca$value);
k2$missesrate = k2$k_l2dcm.value / k2$k_l2tca.value
k2 <- k2[k2$missesrate > 0.80,]
#+end_src

#+RESULTS:


#+begin_src R :results output graphics :file /home/gabrielbmoro/Dropbox/MasterStudy/works/dissertacao_gbmoro/presentations/visitToHPE/img/cgGraph.png :exports both :width 600 :height 400 :session *cg* 
library(ggplot2);

ggplot(k2, aes(x=as.factor(k_l2dcm.codeline), y=missesrate, fill=as.factor(k_l2dcm.region))) +
  geom_bar(stat="identity") +  labs(y = "Rate Cache Misses - Cache L2" , x = "Code Lines") + 
  theme_bw() +
theme(
    strip.text.x=element_text(size = 20),
    axis.title=element_text(size=18),
    axis.text = element_text(size = 10),
    legend.key = element_rect(),
    legend.background = element_rect(fill = "white"),
    legend.title = element_text(size=18),
    legend.text = element_text(size=14),
    panel.grid.major = element_line(colour = "grey"),
    panel.grid.minor = element_blank()
  ) + facet_grid(~k_l2dcm.file);

#+end_src

#+RESULTS:
[[file:/home/gabrielbmoro/Dropbox/MasterStudy/works/dissertacao_gbmoro/presentations/visitToHPE/img/cgGraph.png]]
