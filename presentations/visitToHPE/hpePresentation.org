# -*- coding: utf-8 -*-
# -*- mode: org -*-
#+startup: beamer
#+STARTUP: overview
#+STARTUP: indent
#+TAGS: noexport(n)

# Impact on Intranode and Internode Communication
#+Title: Detecting Memory-Bound Regions in Parallel Applications
#+Author: Gabriel B. Moro @@latex:\\@@ gabriel.bmoro@inf.ufrgs.br
#+Date: Porto Alegre, December 2016

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [12pt,xcolor=dvipsnames,presentation]
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+STARTUP: beamer overview indent
#+LATEX_HEADER: \usepackage{tikz}
#+LATEX_HEADER: \usepackage{perpage}
#+LATEX_HEADER: \usetikzlibrary{arrows,shapes}
#+LATEX_HEADER: \input{org-babel-style-preembule.tex}
#+LATEX_HEADER: \institute[]{
#+LATEX_HEADER:   \includegraphics[width=.16\textwidth]{img/gppd.png}
#+LATEX_HEADER:   \hfill
#+LATEX_HEADER:   \includegraphics[width=.16\textwidth]{img/inf.pdf}
#+LATEX_HEADER:   \hfill
#+LATEX_HEADER:   \includegraphics[width=.16\textwidth]{img/ufrgs.pdf}
#+LATEX_HEADER:   \hfill
#+LATEX_HEADER:   \includegraphics[width=.26\textwidth]{img/hpe.jpg}
#+LATEX_HEADER: }
#+LaTeX: \input{org-babel-document-preembule.tex}
#+LaTeX: \newcommand{\prettysmall}[1]{\fontsize{#1}{#1}\selectfont}

#+LaTeX: \tikzstyle{format} = [draw, thin, fill=blue!20]
#+LaTeX: \tikzstyle{medium} = [ellipse, draw, thin, fill=green!20, minimum height=2.5em]


* Introduction

** 
*** Introduction

*Motivation*

- Memory-bound: programs with misses cache rate considerable
  (e.g. Breadth-First Search) 

- CPU-bound: programs limited by processing (e.g. Matrices
  Multiplication) 

- Programs can have fragments more Memory-bound than others more
  CPU-bound (e.g. Fourier Transform) 

*Objective*

- Measure hardware counters at every given time interval to
discover memory-bound regions

* Methodology
** 
*** Methodology

\begin{tikzpicture}

\node at (0,17) [draw,rectangle,rectangle left angle=70,rectangle right angle=-70,minimum height=1cm, fill=orange!20] (App) {App};
\node at (2.4,18) [draw,rectangle split, rectangle split horizontal,rectangle split parts=3,minimum height=1cm,fill=gray!10] (Lik) {\nodepart{two}\shortstack{Likwid\\}};
\node at (2.4,16) [draw,rectangle split, rectangle split horizontal,rectangle split parts=3,minimum height=1cm,fill=gray!10] (Sc) {\nodepart{two}\shortstack{Score-p\\}};
\node at (5.4,18) [draw,trapezium,trapezium left angle=70,trapezium right angle=-70,minimum height=1cm] (T1) {Trace};
\node at (5.4,16) [draw,trapezium,trapezium left angle=70,trapezium right angle=-70,minimum height=1cm] (T2) {Trace};
\node at (9.4,17) [draw,rectangle,rectangle left angle=70,rectangle right angle=-70,minimum height=1cm,rounded corners,fill=green!20] (Det){\shortstack{Detect Memory-Bound\\ Regions}};

\draw[->] (App.east) + (-1,1.1) coordinate (a1) ++ (0.02,0.12) -- (Lik.west |- a1);
\draw[->] (App.east) + (-1,-0.9) coordinate (a1) ++ (0.02,0.12) -- (Sc.west |- a1);
\draw[->] (Lik.west) + (2.35,0.02) coordinate (a1) -- (T1.west |- a1);
\draw[->] (Sc.west) + (2.52,0.02) coordinate (a1) -- (T2.west |- a1);
\draw[->] (T1.east) + (-1,-0.3) coordinate (a1) ++ (0.02,0.12) -- (Det.west |- a1);
\draw[->] (T2.east) + (-1,0.4) coordinate (a1) ++ (0.02,0.12) -- (Det.west |- a1);


\end{tikzpicture}

*** Results - Likwid

#+LaTeX: \begin{columns}\begin{column}{.45\linewidth}
\begin{figure}[!htb]
\includegraphics[width=\linewidth,height=2.8cm]{../../producao/2016_wsppd/img/ft_L2_L3_100ms.pdf}
\label{figFT}
\end{figure}
\vspace{-1.2cm}
\begin{figure}[!htb]
\includegraphics[width=\linewidth,height=2.8cm]{../../producao/2016_wsppd/img/lu_L2_L3_100ms.pdf}
\label{figLu}
\end{figure}

#+LaTeX: \end{column}
#+LaTeX: \begin{column}{.35\linewidth}
#+LaTeX: {\small
	=Beagle1:=
		- 2 x Intel (R) Xeon (R) E5-2650 CPU 2.00 GHz
		  - 8 physical cores
		  - Hyper-Threading tecnology

  =Experiment=:
  	- Sampling interval - 100 milliseconds.
#+LaTeX:}
#+LaTeX: \end{column}
#+LaTeX: \end{columns}

\vspace{0.5cm}
\hline
\tiny $^{[1]}$ *Moro, Gabriel and Schnorr, Lucas*. /Measuring Hardware Counters for
HPC Application Phase Detection/. XIV Workshop de Processamento
Paralelo e DistribuÃ­do. Porto Alegre, 2016.

*** Results - Score-P

#+LaTeX: \begin{columns}\begin{column}{.45\linewidth}

*Metrics*

- Cache L2 loads
- Cache L2 misses


*Filter Script*

- Use of the Score-p filter, selecting only OpenMP regions

- Auxiliary scripts: =otf2ompprint2paje= and =pj_dump=

#+LaTeX: \end{column}
#+LaTeX: \begin{column}{.50\linewidth}
#+LaTeX: {\small


	=Hype2:=
		- 2 x Intel (R) Xeon (R) E5-2650 v3 CPU 2.30 GHz
		  - 2 * 20 cores + HT technology
		- L1/L2/L3: 32/256/25600K

#+LaTeX:}
#+LaTeX: \end{column}
#+LaTeX: \end{columns}

* Preliminary Results
 
** 
*** Preliminary Results

- *FT*

#+LaTeX: {\centering\includegraphics[width=\textwidth]{img/gandhiFt.png}}


*** Preliminary Results

- *FT* (1 thread)

#+LaTeX: {\centering\includegraphics[width=\textwidth]{img/gandhiFt1thread.png}}


* Conclusion
** 
*** Conclusion

*Contribution*

- Automatically identify the memory-bound regions based on the
hardware counters


*Future Work*

- Reducing the power consumption of parallel applications with DVFS
  approach
  
  	-> Automatic instrumentation of memory-bound regions

* Graphs                                                           :noexport:

#+name: pjdumprastro
#+begin_src shell :results output
ls -1 $HOME/Downloads/trace_ft.csv
#+end_src


#+RESULTS: pjdumprastro
: /home/gabrielbmoro/Downloads/trace_ft.csv


#+begin_src shell :results output :var filename=pjdumprastro
head $filename
#+end_src

#+RESULTS:
#+begin_example
State, zero, S, 0.000000, 0.139180, 0.139180, 0.000000, main, 18296, 2123, 4692, 24000, 8000, 21495, 2588, 5381, 24000, 8000
State, zero, S, 0.139180, 0.148488, 0.009308, 1.000000, MAIN__, 21495, 2588, 5381, 24000, 8000, 22044, 2632, 5437, 24000, 8000
State, zero, S, 0.148488, 0.656688, 0.508200, 2.000000, setup_, 22044, 2632, 5437, 24000, 8000, 34173, 3838, 7858, 24000, 8000
State, zero, S, 0.656688, 0.674748, 0.018060, 1.000000, MAIN__, 34173, 3838, 7858, 24000, 8000, 35097, 3946, 8200, 24000, 8000
State, zero, S, 0.674748, 47.819882, 47.145134, 2.000000, init_ui_, 35097, 3946, 8200, 24000, 8000, 45675, 4845, 9316, 24000, 12000
State, zero, S, 47.819882, 47.840838, 0.020956, 3.000000, !$omp parallel @ft.f:190, 45675, 4845, 9316, 24000, 12000, 46337, 4920, 9531, 24000, 12000
State, zero, S, 47.840838, 275.543612, 227.702774, 4.000000, !$omp do @ft.f:190, 46337, 4920, 9531, 24000, 12000, 134653, 34283, 9894, 36000, 96000
State, zero, S, 275.543612, 388.417224, 112.873612, 5.000000, !$omp implicit barrier @ft.f:200, 134653, 34283, 9894, 36000, 96000, 136316, 34513, 10537, 36000, 100000
State, zero, S, 388.417224, 388.441912, 0.024688, 4.000000, !$omp do @ft.f:190, 136316, 34513, 10537, 36000, 100000, 137123, 34585, 10793, 36000, 100000
State, zero, S, 388.441912, 388.445996, 0.004084, 3.000000, !$omp parallel @ft.f:190, 137123, 34585, 10793, 36000, 100000, 137210, 34592, 10807, 36000, 100000
#+end_example

#+begin_src R :results output :session :exports both :var filename=pjdumprastro
library(dplyr);
df <- read.csv(gsub("\n", "", filename), header=FALSE, strip.white=TRUE);
df <- df %>%
    rename(
        Type=V1, Thread=V2, StateType=V3, Start=V4, End=V5, Duration=V6, Imbrication=V7, Value=V8,
        Push_PAPI_L2_TCA=V9,
        Push_PAPI_L2_DCM=V10,
        Push_PAPI_L2_ICM=V11,
        Push_ru_utime=V12,
        Push_ru_stime=V13,
        Pop_PAPI_L2_TCA=V14,
        Pop_PAPI_L2_DCM=V15,
        Pop_PAPI_L2_ICM=V16,
        Pop_ru_utime=V17,
        Pop_ru_stime=V18) %>%
    mutate(
        PAPI_L2_TCA = Pop_PAPI_L2_TCA-Push_PAPI_L2_TCA,
        PAPI_L2_DCM = Pop_PAPI_L2_DCM-Push_PAPI_L2_DCM,
        PAPI_L2_ICM = Pop_PAPI_L2_ICM-Push_PAPI_L2_ICM,
        ru_utime = Pop_ru_utime - Push_ru_utime,
        ru_stime = Pop_ru_stime - Push_ru_stime) %>%
    select(
        -Type, -StateType, -Imbrication) %>%
    select(-Push_PAPI_L2_TCA,
        -Push_PAPI_L2_DCM,
        -Push_PAPI_L2_ICM,
        -Push_ru_utime,
        -Push_ru_stime,
        -Pop_PAPI_L2_TCA,
        -Pop_PAPI_L2_DCM,
        -Pop_PAPI_L2_ICM,
        -Pop_ru_utime,
        -Pop_ru_stime) %>% as.data.frame();
#Renomear os identificadores das threads
tids = unique(df$Thread)
tidsdf = data.frame(Thread=tids, ntids = 1:length(tids));
df <- merge (df, tidsdf, by.x="Thread", by.y="Thread");
df <- df %>% select(-Thread) %>% rename(Thread=ntids) %>% as.data.frame();
head(df);
#+end_src

#+RESULTS:
#+begin_example
     Start      End   Duration                            Value PAPI_L2_TCA
1 118.6302 118.6579   0.027724         !$omp parallel @ft.f:190         648
2 118.6579 371.7982 253.140292               !$omp do @ft.f:190      247956
3 371.7982 388.5097  16.711421 !$omp implicit barrier @ft.f:200        1219
4 388.5097 388.5326   0.022956               !$omp do @ft.f:190         265
5 388.5326 388.5401   0.007444         !$omp parallel @ft.f:190          95
6 388.6433 388.6504   0.007100         !$omp parallel @ft.f:431         299
  PAPI_L2_DCM PAPI_L2_ICM ru_utime ru_stime Thread
1          44         189        0        0     24
2       63924         324    12000    92000     24
3         199         415     4000     4000     24
4          47          70        0        0     24
5          10           1        0        0     24
6          12          53        0        0     24
#+end_example

#+begin_src R :results output graphics :file img/gandhiFt1thread.png :exports both :width 1600 :height 400 :session
library(ggplot2);
library(dplyr);

df <- filter(df,Thread==1)
df1 <- df;

tstart = min(df1$Start);
tend = max(df1$End);
ggplot() +
    theme_bw(base_size = 16) +
    xlab("Time [s]") + ylab("Thread") +
        theme (
            plot.margin = unit(c(0,0,0,0), "cm"),
            legend.margin = unit(.1, "line"),
            panel.grid = element_blank(),
            legend.position = "bottom",
            legend.title = element_blank()
        ) +
    coord_cartesian(xlim=c(tstart,tend)) +
    guides(fill = guide_legend(nrow = 4)) +
    geom_rect(data=df1, alpha=1, aes(fill=Value,
                                  xmin=Start,
                                  xmax=End,
                                  ymin=Thread,
                                  ymax=Thread + 0.9)) 
   # scale_fill_brewer(palette = "Set1");
#+end_src

#+RESULTS:
[[file:img/gandhiFt1thread.png]]


#+begin_src R :results output graphics :file img/gandhiFt.png :exports both :width 1600 :height 400 :session
library(ggplot2);
df1 <- df;
tstart = min(df1$Start);
tend = max(df1$End);
ggplot() +
    theme_bw(base_size = 16) +
    xlab("Time [s]") + ylab("Thread") +
        theme (
            plot.margin = unit(c(0,0,0,0), "cm"),
            legend.margin = unit(.1, "line"),
            panel.grid = element_blank(),
            legend.position = "bottom",
            legend.title = element_blank()
        ) +
    coord_cartesian(xlim=c(tstart,tend)) +
    guides(fill = guide_legend(nrow = 4)) +
    geom_rect(data=df1, alpha=1, aes(fill=Value,
                                  xmin=Start,
                                  xmax=End,
                                  ymin=Thread,
                                  ymax=Thread + 0.9)) 
   # scale_fill_brewer(palette = "Set1");
#+end_src

#+RESULTS:
[[file:img/gandhiFt.png]]
